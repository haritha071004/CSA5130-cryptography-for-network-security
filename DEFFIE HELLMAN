import random

def mod_exp(base, exp, mod):
    result = 1
    base = base % mod
    while exp > 0:
        if exp % 2 == 1:
            result = (result * base) % mod
        exp //= 2
        base = (base * base) % mod
    return result

def generate_key(prime, primitive_root):
    private_key = random.randint(2, prime - 2)
    public_key = mod_exp(primitive_root, private_key, prime)
    return private_key, public_key

def generate_shared_secret(private_key, other_public_key, prime):
    return mod_exp(other_public_key, private_key, prime)

# Example usage
prime = 23  # Prime number
primitive_root = 5  # Primitive root of prime

# Generate keys for Alice
alice_private_key, alice_public_key = generate_key(prime, primitive_root)

# Generate keys for Bob
bob_private_key, bob_public_key = generate_key(prime, primitive_root)

# Alice calculates the shared secret using Bob's public key
alice_shared_secret = generate_shared_secret(alice_private_key, bob_public_key, prime)

# Bob calculates the shared secret using Alice's public key
bob_shared_secret = generate_shared_secret(bob_private_key, alice_public_key, prime)

print("Prime:", prime)
print("Primitive root:", primitive_root)
print("Alice's private key:", alice_private_key)
print("Alice's public key:", alice_public_key)
print("Bob's private key:", bob_private_key)
print("Bob's public key:", bob_public_key)
print("Shared secret calculated by Alice:", alice_shared_secret)
print("Shared secret calculated by Bob:", bob_shared_secret)


OUTPUT:
Prime: 23
Primitive root: 5
Alice's private key: 6
Alice's public key: 8
Bob's private key: 15
Bob's public key: 19
Shared secret calculated by Alice: 2
Shared secret calculated by Bob: 2
